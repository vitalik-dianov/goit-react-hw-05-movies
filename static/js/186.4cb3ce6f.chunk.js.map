{"version":3,"file":"static/js/186.4cb3ce6f.chunk.js","mappings":"8NAyCA,UAnCgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAgBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IACE,IAAMC,EAAY,mCAAG,oGACAC,EAAAA,GAAoBP,GADpB,UACbQ,EADa,wDAKnBJ,EAAWI,EAAKC,SALG,2CAAH,qDAQlBH,GAGD,CAFC,MAAOI,GACPC,QAAQC,IAAIF,EACb,CACF,GAAE,CAACV,KAEF,iCACE,qCACA,wBACGG,EAAQU,KAAI,SAAAC,GACX,OACE,2BACE,oCAAYA,EAAOC,WACnB,uBAAID,EAAOE,YAFJF,EAAOG,GAKnB,QAIR,C","sources":["components/Reviews/Reviews.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport * as movieAPI from 'services/movieAPI';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n\n  const [reviews, setReviews] = useState([]);\n  useEffect(() => {\n    try {\n      const fetchReviews = async () => {\n        const data = await movieAPI.getReviews(movieId);\n        if (!data) {\n          return;\n        }\n        setReviews(data.results);\n      };\n\n      fetchReviews();\n    } catch (error) {\n      console.log(error);\n    }\n  }, [movieId]);\n  return (\n    <>\n      <h3>Reviews</h3>\n      <ul>\n        {reviews.map(review => {\n          return (\n            <li key={review.id}>\n              <p>Author: {review.author}</p>\n              <p>{review.content}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\nexport default Reviews;\n"],"names":["movieId","useParams","useState","reviews","setReviews","useEffect","fetchReviews","movieAPI","data","results","error","console","log","map","review","author","content","id"],"sourceRoot":""}